---
- name: Calico | Write Calico cni config
  template:
    src: "cni-calico.conflist.j2"
    dest: "/etc/cni/net.d/10-calico.conflist"
    owner: kube

- name: Calico | Create calico certs directory
  file:
    dest: "{{ calico_cert_dir }}"
    state: directory
    mode: 0750
    owner: root
    group: root

- name: Calico | Link etcd certificates for calico-node
  file:
    src: "{{ etcd_cert_dir }}/{{ item.s }}"
    dest: "{{ calico_cert_dir }}/{{ item.d }}"
    state: hard
    force: yes
  with_items:
    - {s: "ca.pem", d: "ca_cert.crt"}
    - {s: "node-{{ inventory_hostname }}.pem", d: "cert.crt"}
    - {s: "node-{{ inventory_hostname }}-key.pem", d: "key.pem"}

- name: Calico | Install calicoctl container script
  template:
    src: calicoctl-container.j2
    dest: "{{ bin_dir }}/calicoctl"
    mode: 0755
    owner: root
    group: root
  changed_when: false

# TODO: Make download-role pull image even if kubeadm_enabled == true
- name: Calico | Pull hyperkube_image
  command: "/usr/local/bin/ctr images pull {{ hyperkube_image_repo }}:{{ hyperkube_image_tag }}"

- name: Calico | Copy cni plugins from hyperkube
  command: "/usr/local/bin/ctr run --rm --mount type=bind,src=/opt/cni/bin,dst=/cnibindir,options=rbind {{ hyperkube_image_repo }}:{{ hyperkube_image_tag }} hyperkube /bin/cp -r /opt/cni/bin/. /cnibindir/"
  register: cni_task_result
  until: cni_task_result.rc == 0
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  changed_when: false
  tags:
    - hyperkube
    - upgrade

- name: Calico | Copy cni plugins from calico/cni container
  command: "/usr/local/bin/ctr run --rm --mount type=bind,src=/opt/cni/bin,dst=/cnibindir,options=rbind {{ calico_cni_image_repo }}:{{ calico_cni_image_tag }} calico-cni sh -c 'cp /opt/cni/bin/* /cnibindir/'"
  register: cni_task_result
  until: cni_task_result.rc == 0
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  changed_when: false
  when:
    - "overwrite_hyperkube_cni|bool"
  tags:
    - hyperkube
    - upgrade

- name: Calico | Set cni directory permissions
  file:
    path: /opt/cni/bin
    state: directory
    owner: kube
    recurse: true
    mode: 0755

- name: Calico | wait for etcd
  uri:
    url: "{{ etcd_access_addresses.split(',') | first }}/health"
    validate_certs: no
    client_cert: "{{ etcd_cert_dir }}/node-{{ inventory_hostname }}.pem"
    client_key: "{{ etcd_cert_dir }}/node-{{ inventory_hostname }}-key.pem"
  register: result
  until: result.status == 200 or result.status == 401
  retries: 10
  delay: 5
  run_once: true

- name: Calico | Create /var/run/calico
  file:
    path: /var/run/calico
    state: directory

- name: Calico | Check if calico network pool has already been configured
  shell: >
    {{ bin_dir }}/calicoctl get ippool | grep -w "{{ kube_pods_subnet }}" | wc -l
  register: calico_conf
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  delegate_to: "{{ groups['kube-master'][0] }}"
  run_once: true

- name: Calico | Write calico network pool config to disk
  shell: >
    echo "
      { "kind": "IPPool",
        "apiVersion": "projectcalico.org/v3",
        "metadata": {
          "name": "{{ calico_pool_name }}",
        },
        "spec": {
          "cidr": "{{ kube_pods_subnet }}",
          "ipipMode": "{{ ipip_mode }}",
          "natOutgoing": {{ nat_outgoing|default(false) and not peer_with_router|default(false) }} }} " > /var/run/calico/ippool.json
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - 'calico_conf.stdout == "0"'
    - calico_version is version("v3.0.0", ">=")

- name: Calico | Configure calico network pool
  shell: >
    {{ bin_dir }}/calicoctl create -f /var/run/calico/ippool.json
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - 'calico_conf.stdout == "0"'
    - calico_version is version("v3.0.0", ">=")

- name: Calico | Clean up calico network pool config file
  file:
    path: /var/run/calico/ippool.json
    state: absent
  when:
    - 'calico_conf.stdout == "0"'
    - calico_version is version("v3.0.0", ">=")

- name: "Determine nodeToNodeMesh needed state"
  set_fact:
    nodeToNodeMeshEnabled: "false"
  when:
    - peer_with_router|default(false) or peer_with_calico_rr|default(false)
    - inventory_hostname in groups['k8s-cluster']
  run_once: yes

- name: Calico | Write global as_num config to disk
  shell: >
    echo '
    { "kind": "BGPConfiguration",
    "apiVersion": "projectcalico.org/v3",
    "metadata": {
        "name": "default",
    },
    "spec": {
        "logSeverityScreen": "Info",
        "nodeToNodeMeshEnabled": {{ nodeToNodeMeshEnabled|default('true') }} ,
        "asNumber": {{ global_as_num }} }} ' > /var/run/calico/bgpconfig.json
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - calico_version is version('v3.0.0', '>=')

- name: Calico | Set global as_num
  shell: "{{ bin_dir }}/calicoctl create --skip-exists -f /var/run/calico/bgpconfig.json"
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - calico_version is version('v3.0.0', '>=')

- name: Calico | Clean up global as_num config file
  file:
    path: /var/run/calico/bgpconfig.json
    state: absent
  run_once: true
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - calico_version is version('v3.0.0', '>=')

- name: Calico | Write node asNumber config for per node peering to disk
  shell: >
   echo '{
   "apiVersion": "projectcalico.org/v3",
   "kind": "Node",
   "metadata": {
      "name": "{{ inventory_hostname }}"
   },
   "spec": {
      "bgp": {
        "asNumber": "{{ local_as }}"
      },
      "orchRefs":[{"nodeName":"{{ inventory_hostname }}","orchestrator":"k8s"}]
   }}' > /var/run/calico/node.json
  when:
    - calico_version is version('v3.0.0', '>=')
    - peer_with_router|default(false)
    - inventory_hostname in groups['k8s-cluster']
    - local_as is defined
    - groups['calico-rr'] | default([]) | length == 0

- name: Calico | Configure node asNumber for per node peering
  shell: >
    {{ bin_dir }}/calicoctl create --skip-exists -f /var/run/calico/node.json
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  when:
    - calico_version is version('v3.0.0', '>=')
    - peer_with_router|default(false)
    - inventory_hostname in groups['k8s-cluster']
    - local_as is defined
    - groups['calico-rr'] | default([]) | length == 0

- name: Calico | Clean up node asNumber for per node peering config file
  file:
    path: /var/run/calico/node.json
  when:
    - calico_version is version('v3.0.0', '>=')
    - peer_with_router|default(false)
    - inventory_hostname in groups['k8s-cluster']
    - local_as is defined
    - groups['calico-rr'] | default([]) | length == 0

- name: Calico | Write peering with router(s) at node scope config to disk
  shell: >
   echo '{
   "apiVersion": "projectcalico.org/v3",
   "kind": "BGPPeer",
   "metadata": {
      "name": "{{ inventory_hostname }}-{{ item.router_id }}"
   },
   "spec": {
      "asNumber": "{{ item.as }}",
      "node": "{{ inventory_hostname }}",
      "peerIP": "{{ item.router_id }}"
   }}' >> /var/run/calico/bgppeer_node.json
  with_items:
    - "{{ peers|selectattr('scope','undefined')|list|default([]) | union(peers|selectattr('scope','defined')|selectattr('scope','equalto', 'node')|list|default([])) }}"
  when:
    - calico_version is version('v3.0.0', '>=')
    - peer_with_router|default(false)
    - inventory_hostname in groups['k8s-cluster']

- name: Calico | Configure peering with router(s) at node scope
  shell: "{{ bin_dir }}/calicoctl create --skip-exists -f /var/run/calico/bgppeer_node.json"
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  when:
    - calico_version is version('v3.0.0', '>=')
    - peer_with_router|default(false)
    - inventory_hostname in groups['k8s-cluster']

- name: Calico | Clean up peering with router(s) at node scope config file
  file:
    path: /var/run/calico/bgppeer_node.json
    state: absent
  when:
    - calico_version is version('v3.0.0', '>=')
    - peer_with_router|default(false)
    - inventory_hostname in groups['k8s-cluster']

- name: Calico | Write peering with router(s) at global scope config to disk
  shell: >
   echo '{
   "apiVersion": "projectcalico.org/v3",
   "kind": "BGPPeer",
   "metadata": {
      "name": "global-{{ item.router_id }}"
   },
   "spec": {
      "asNumber": "{{ item.as }}",
      "peerIP": "{{ item.router_id }}"
   }}' >> /var/run/calico/bgppeer_global.json
  with_items:
    - "{{ peers|selectattr('scope','defined')|selectattr('scope','equalto', 'global')|list|default([]) }}"
  run_once: true
  when:
    - calico_version | version_compare('v3.0.0', '>=')
    - peer_with_router|default(false)
    - inventory_hostname in groups['k8s-cluster']

- name: Calico | Configure peering with router(s) at global scope
  shell: >
    {{ bin_dir }}/calicoctl create --skip-exists -f /var/run/calico/bgppeer_global.json
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  with_items:
    - "{{ peers|selectattr('scope','defined')|selectattr('scope','equalto', 'global')|list|default([]) }}"
  run_once: true
  when:
    - calico_version | version_compare('v3.0.0', '>=')
    - peer_with_router|default(false)
    - inventory_hostname in groups['k8s-cluster']

- name: Calico | Clean up peering with router(s) at global scope config file
  file:
    path: /var/run/calico/bgppeer_global.json
  run_once: true
  when:
    - calico_version | version_compare('v3.0.0', '>=')
    - peer_with_router|default(false)
    - inventory_hostname in groups['k8s-cluster']

- name: Calico | Write peering with route reflectors config to disk
  shell: >
   echo '{
   "apiVersion": "projectcalico.org/v3",
   "kind": "BGPPeer",
   "metadata": {
      "name": "{{ inventory_hostname }}-{{ hostvars[item]["calico_rr_ip"]|default(hostvars[item]["ip"])|default(hostvars[item]["ansible_default_ipv4"]["address"]) }}"
   },
   "spec": {
      "asNumber": "{{ local_as | default(global_as_num)}}",
      "node": "{{ inventory_hostname }}",
      "peerIP": "{{ hostvars[item]["calico_rr_ip"]|default(hostvars[item]["ip"])|default(hostvars[item]["ansible_default_ipv4"]["address"]) }}"
   }}' >> /var/run/bgppeer_rr.json
  with_items:
    - "{{ groups['calico-rr'] | default([]) }}"
  when:
    - calico_version is version('v3.0.0', '>=')
    - peer_with_calico_rr|default(false)
    - inventory_hostname in groups['k8s-cluster']
    - hostvars[item]['cluster_id'] == cluster_id

- name: Calico | Configure peering with route reflectors
  shell: >
    {{ bin_dir }}/calicoctl create --skip-exists -f /var/run/calicoctl/bgppeer_rr.json
  retries: 4
  delay: "{{ retry_stagger | random + 3 }}"
  when:
    - calico_version is version('v3.0.0', '>=')
    - peer_with_calico_rr|default(false)
    - inventory_hostname in groups['k8s-cluster']
    - hostvars[item]['cluster_id'] == cluster_id

- name: Calico | Clean up peering with route reflectors config file
  file:
    path: /var/run/calico/bgppeer_rr.json
    state: absent
  when:
    - calico_version is version('v3.0.0', '>=')
    - peer_with_calico_rr|default(false)
    - inventory_hostname in groups['k8s-cluster']
    - hostvars[item]['cluster_id'] == cluster_id

- name: Calico | Create calico manifests
  template:
    src: "{{item.file}}.j2"
    dest: "{{kube_config_dir}}/{{item.file}}"
  with_items:
    - {name: calico-config, file: calico-config.yml, type: cm}
    - {name: calico-node, file: calico-node.yml, type: ds}
    - {name: calico, file: calico-node-sa.yml, type: sa}
    - {name: calico, file: calico-cr.yml, type: clusterrole}
    - {name: calico, file: calico-crb.yml, type: clusterrolebinding}
  register: calico_node_manifests
  when:
    - inventory_hostname in groups['kube-master']
    - rbac_enabled or item.type not in rbac_resources
